// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  USER
}

model Branch {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  address     String       @db.VarChar(400) @default("Null")
  users       User[]
  stocks      Stocks[]
  purchase    Purchases[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id          Int          @id @default(autoincrement())
  branchId    Int?
  branch      Branch?      @relation(fields: [branchId], references: [id])
  purchases   Purchases[]
  firstName   String       @db.VarChar(50)
  lastName    String       @db.VarChar(50)
  phoneNumber String       @db.VarChar(50)
  email       String       @unique @db.VarChar(50)
  password    String
  roleType    UserType     @default(ADMIN)
  roles       RoleOnUser[] @relation("UserRoles")
  status      Int          @default(1) // 1=Active and 0=Dis-Active
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Role {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  users       RoleOnUser[]       @relation("UserRoles")
  permissions PermissionOnRole[] @relation("RolePermissions")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Module {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(80) // Ensure module names are unique
  permissions Permission[] @relation("ModulePermissions") // Relation to permissions
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(80) // Ensure permission names are unique
  moduleId    Int          // Foreign key to the Module model
  module      Module       @relation("ModulePermissions", fields: [moduleId], references: [id])
  roles       PermissionOnRole[] @relation("RolePermissions")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model RoleOnUser {
  userId Int
  roleId Int

  user User @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation("UserRoles", fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model PermissionOnRole {
  roleId       Int
  permissionId Int

  role       Role       @relation("RolePermissions", fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation("RolePermissions", fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Categories {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  code        String    @unique @db.VarChar(50)
  products    Products[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Units {
  id              Int       @id @default(autoincrement())
  name            String    @unique @db.VarChar(100)
  productvariants ProductVariants[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

model Brands {
  id           Int        @id @default(autoincrement())
  name         String     @unique @db.VarChar(100)
  description  String?    @db.VarChar(300)
  image        String?    @db.VarChar(80)
  products     Products[]
  deletedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model PaymentMethods {
  id           Int                    @id @default(autoincrement())
  name         String                 @unique @db.VarChar(150)
  purchases    PurchaseOnPayments[]   @relation("PurchasePayments")
  deletedAt    DateTime?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model Products {
  id               Int         @id @default(autoincrement())
  categoryId       Int
  brandId          Int?
  categories       Categories  @relation(fields: [categoryId], references: [id])
  brands           Brands?     @relation(fields: [brandId], references: [id])
  productvariants  ProductVariants[]
  purchaseDetails  PurchaseDetails[] 
  name             String      @unique @db.VarChar(200)
  image            String[]    @db.VarChar(200) // Array of image URLs or paths
  stockAlert       Int?        @default(0) @db.SmallInt
  note             String?     @db.VarChar(250)
  isActive         Int?        @default(1) @db.SmallInt
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  deletedAt        DateTime?
}

model ProductVariants {
  id              Int                  @id @default(autoincrement())
  productId       Int
  unitId          Int?
  products        Products             @relation(fields: [productId], references: [id])
  units           Units?               @relation(fields: [unitId], references: [id])
  stocks          Stocks[]
  purchaseDetails PurchaseDetails[]
  code            String                @unique @db.VarChar(100)
  name            String                @db.VarChar(200) // Array of image URLs or paths
  image           String[]              @db.VarChar(200)
  purchasePrice   Decimal               @default(0.0000) @db.Decimal(10, 4)
  retailPrice     Decimal               @db.Decimal(10, 4)
  wholeSalePrice  Decimal               @db.Decimal(10, 4)
  isActive        Int?                  @default(1) @db.SmallInt
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  deletedAt       DateTime?
}

model Stocks {
  id               Int             @id @default(autoincrement())
  branchId         Int
  productVariantId Int
  branch           Branch          @relation(fields: [branchId], references: [id])
  productvariants  ProductVariants @relation(fields: [productVariantId], references: [id])
  qty              Int?
}

model Suppliers {
  id          Int         @id @default(autoincrement())
  purchases   Purchases[]
  name        String      @db.VarChar(100)
  phone       String      @unique @db.VarChar(50)
  email       String      @db.VarChar(50)
  address     String?     @db.VarChar(400)
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Purchases {
  id                Int                   @id @default(autoincrement())
  userId            Int
  branchId          Int
  supplierId        Int
  user              User                  @relation(fields: [userId], references: [id])
  branch            Branch                @relation(fields: [branchId], references: [id])
  suppliers         Suppliers             @relation(fields: [supplierId], references: [id])
  purchaseDetails   PurchaseDetails[]
  payments          PurchaseOnPayments[]  @relation("PurchasePayments")
  ref               String                @db.VarChar(50)
  date              String                @db.VarChar(30)
  taxRate           Decimal?              @default(0) @db.Decimal(10, 4)
  taxNet            Decimal?              @default(0) @db.Decimal(10, 4)
  discount          Decimal?              @default(0) @db.Decimal(10, 4)
  shipping          Decimal?              @default(0) @db.Decimal(10, 4)
  grandTotal        Decimal               @db.Decimal(10, 4)
  paidAmount        Decimal?              @default(0) @db.Decimal(10, 4)
  status            String                @db.VarChar(20)
  paymentStatus     String?               @db.VarChar(20)
  note              String?               @db.VarChar(500)
  deletedAt         DateTime?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model PurchaseDetails {
  id                  Int             @id @default(autoincrement())
  purchaseId          Int
  productId           Int
  productVariantId    Int
  purchases           Purchases       @relation(fields: [purchaseId], references: [id])
  products            Products        @relation(fields: [productId], references: [id])
  productvariants     ProductVariants @relation(fields: [productVariantId], references: [id])
  code                String?          @db.VarChar(100)
  cost                Decimal         @db.Decimal(10, 4)
  taxNet              Decimal?        @default(0) @db.Decimal(10, 4)
  taxMethod           String?         @db.VarChar(15)
  discount            Decimal?        @default(0) @db.Decimal(10, 4)
  discountMethod      String?         @db.VarChar(15)
  total               Decimal         @db.Decimal(10, 4)
  quantity            Int
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model PurchaseOnPayments {
  id                Int            @id @default(autoincrement()) // Add this line for a unique identifier
  branchId          Int
  purchaseId        Int
  paymentMethodId   Int
  userId            Int
  amount            Decimal        @db.Decimal(10, 4)
  createdAt         DateTime       @default(now())

  paymentMethods    PaymentMethods @relation("PurchasePayments", fields: [paymentMethodId], references: [id], onDelete: Cascade)
  purchases         Purchases      @relation("PurchasePayments", fields: [purchaseId], references: [id], onDelete: Cascade)

  // @@id([paymentMethodId, purchaseId, userId]) // You can add a unique constraint on multiple fields
  
  // Note: If want to use this line @@id([paymentMethodId, purchaseId, userId]), 
  // we need to commend this line (id                Int            @id @default(autoincrement())), 
  // but want to use this line (id                Int            @id @default(autoincrement())), 
  // we nee to commend this line @@id([paymentMethodId, purchaseId, userId])
}

// How to run the Prisma Migrate
// npx prisma migrate dev --name init or npx prisma migrate deploy