enum UserType {
  ADMIN
  USER
}

model Branch {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  address     String       @db.VarChar(400) @default("Null")
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id          Int          @id @default(autoincrement())
  branchId    Int?
  branch      Branch?      @relation(fields: [branchId], references: [id])
  firstName   String       @db.VarChar(50)
  lastName    String       @db.VarChar(50)
  phoneNumber String       @db.VarChar(50)
  email       String       @unique @db.VarChar(50)
  password    String
  roleType    UserType     @default(ADMIN)
  roles       RoleOnUser[] @relation("UserRoles")
  status      Int          @default(1) // 1=Active and 0=Dis-Active
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Role {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  users       RoleOnUser[]       @relation("UserRoles")
  permissions PermissionOnRole[] @relation("RolePermissions")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Module {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(80) // Ensure module names are unique
  permissions Permission[] @relation("ModulePermissions") // Relation to permissions
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(80) // Ensure permission names are unique
  moduleId    Int          // Foreign key to the Module model
  module      Module       @relation("ModulePermissions", fields: [moduleId], references: [id])
  roles       PermissionOnRole[] @relation("RolePermissions")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model RoleOnUser {
  userId Int
  roleId Int

  user User @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation("UserRoles", fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model PermissionOnRole {
  roleId       Int
  permissionId Int

  role       Role       @relation("RolePermissions", fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation("RolePermissions", fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Categories {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  code        String    @unique @db.VarChar(50)
  products    Products[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Units {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  products  Products[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Brands {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(100)
  description  String?   @db.VarChar(300)
  image        String?   @db.VarChar(80)
  products     Products[]
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Products {
  id          Int        @id @default(autoincrement())
  categoryId  Int
  brandId     Int?
  unitId      Int?
  categories  Categories  @relation(fields: [categoryId], references: [id])
  brands      Brands?      @relation(fields: [brandId], references: [id])
  units       Units?       @relation(fields: [unitId], references: [id])
  code        String      @db.VarChar(50)
  name        String      @db.VarChar(200)
  cost        Decimal     @db.Decimal(10, 4) // Use Decimal for high precision
  price       Decimal     @db.Decimal(10, 4)
  image       String[]    @db.VarChar(200) // Array of image URLs or paths
  stockAlert  Int?        @default(0) @db.SmallInt
  note        String?     @db.VarChar(250)
  isActive    Int?        @default(1) @db.SmallInt
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
}

model ProductVariants {
  id          Int         @id @default(autoincrement())
  productId   Int
  name        String      @db.VarChar(200)
  qty         Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
}